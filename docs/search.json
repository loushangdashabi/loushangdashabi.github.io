[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "(只需要运行一次)\n\nlibrary(reticulate)\ninstall_miniconda()\nconda_create(envname = \"mesa-abm\", python_version = \"3.13.5\")\npy_install(c(\"mesa[all]\",\"seaborn\"), envname = \"mesa-abm\", pip = TRUE)\n\n\n\n\n(每次都需要运行)\n\nlibrary(reticulate)\nuse_condaenv(\"mesa-abm\", required = TRUE)\n\n\n\n\n\nimport mesa\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "index.html#安装-python-环境并安装-mesa",
    "href": "index.html#安装-python-环境并安装-mesa",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "(只需要运行一次)\n\nlibrary(reticulate)\ninstall_miniconda()\nconda_create(envname = \"mesa-abm\", python_version = \"3.13.5\")\npy_install(c(\"mesa[all]\",\"seaborn\"), envname = \"mesa-abm\", pip = TRUE)"
  },
  {
    "objectID": "index.html#启动-python-环境",
    "href": "index.html#启动-python-环境",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "(每次都需要运行)\n\nlibrary(reticulate)\nuse_condaenv(\"mesa-abm\", required = TRUE)"
  },
  {
    "objectID": "index.html#导入需要的-python-模块",
    "href": "index.html#导入需要的-python-模块",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "import mesa\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "index.html#创建-agent-类",
    "href": "index.html#创建-agent-类",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.1 创建 Agent 类",
    "text": "2.1 创建 Agent 类\nMesa 会自动为每个创建的 Agent 分配一个整数作为 unique_id。\n下面这段代码创建了一个新类 (class) MoneyAgent，继承了 mesa.Agent 类的属性。\nmesa.Agent 是 Mesa 模块中定义的一个基类，所有的 Agent 都应该继承这个类。\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n    \n    # 初始化，每次使用 MoneyAgent 创建新对象时都会使用如下初始化\n    def __init__(self, model): # self代表当前对象，model 代表模型对象\n      \n        # 将父类中的参数 model (mesa.Agent) 传入，让Agent知道自己所属的模型\n        super().__init__(model)\n\n        # 创建 Agent 的变量 wealth 并设置初始值\n        self.wealth = 1"
  },
  {
    "objectID": "index.html#创建模型类",
    "href": "index.html#创建模型类",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.2 创建模型类",
    "text": "2.2 创建模型类\n创建一个模型类，继承自 mesa.Model，负责创建、保存和管理所有 Agent。\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None): # n 是创建的 Agent 数量，seed 是随机种子\n        super().__init__(seed=seed)\n        # 在self (即当前模型) 中创建一个属性 num_agents，保存 Agent 的数量\n        self.num_agents = n \n        # 调用类方法 create_agents，创建 n 个 Agent\n        MoneyAgent.create_agents(model=self, n=n)"
  },
  {
    "objectID": "index.html#让-agents-do",
    "href": "index.html#让-agents-do",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.3 让 Agents “do”",
    "text": "2.3 让 Agents “do”\n通过 do 让 ABM 运行起来，mesa 中的 do 可以按不同的顺序激活 Agent。\n在每一个 step 中，(通常) 每一个 Agent 都会被激活并采取自己的行动，在内部发生变化和/或与彼此或者环境交互。\n此处使用 agent.shuffle_do() 来实现随机重新排序激活顺序。\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n        self.wealth = 1\n        # 以上代码同上\n        \n        # 定义一个方法 say_hi，每个 step 中都会被调用\n    def say_hi(self):\n        # 为了演示，输出了每个 Agent 的 unique_id\n        print(f\"Hi, I am an agent, you can call me {str(self.unique_id)}.\")\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None):\n        super().__init__(seed=seed)\n        self.num_agents = n\n\n        MoneyAgent.create_agents(model=self, n=n)\n        # 以上代码同上\n\n    # 定义模型的 step 方法\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n        \n        # 随机重新排序 Agent 的激活顺序，并调用每个 Agent 的 say_hi 方法\n        self.agents.shuffle_do(\"say_hi\")\n\n\n2.3.1 运行模型\n创建一个模型对象 (object) 并运行它的 step 方法。\n\n# 创建模型对象 starter_model，使用 MoneyModel 类\n# 此处的 10 对应 MoneyModel 类的第二个参数 n，表示创建 10 个 Agent\nstarter_model = MoneyModel(10)\n\n# 运行模型的 step 方法，激活所有 Agent\nstarter_model.step()\n\nHi, I am an agent, you can call me 2.\nHi, I am an agent, you can call me 4.\nHi, I am an agent, you can call me 10.\nHi, I am an agent, you can call me 8.\nHi, I am an agent, you can call me 5.\nHi, I am an agent, you can call me 7.\nHi, I am an agent, you can call me 1.\nHi, I am an agent, you can call me 6.\nHi, I am an agent, you can call me 9.\nHi, I am an agent, you can call me 3.\n\n\n如果在创建对象时传入了 seed 参数，则每次运行模型时 Agent 的顺序会保持一致。\n\nstarter_model = MoneyModel(10, seed = 1234)\nstarter_model.step()\n\nHi, I am an agent, you can call me 3.\nHi, I am an agent, you can call me 9.\nHi, I am an agent, you can call me 4.\nHi, I am an agent, you can call me 6.\nHi, I am an agent, you can call me 7.\nHi, I am an agent, you can call me 5.\nHi, I am an agent, you can call me 10.\nHi, I am an agent, you can call me 1.\nHi, I am an agent, you can call me 2.\nHi, I am an agent, you can call me 8.\n\n\n\n\n2.3.2 模型修改练习\n在原有模型的基础上，让 Agent 在激活时输出自己的 wealth。\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n\n        self.wealth = 1\n\n    # 定义 say_wealth 方法，输出 Agent 的 wealth\n    def say_wealth(self):\n        print(f\"Hi, I am an agent {self.unique_id},\"\n              f\"and I have {self.wealth} dollars.\")\n        \nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None):\n        super().__init__(seed=seed)\n        self.num_agents = n\n\n        MoneyAgent.create_agents(model=self, n=n)\n\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n        \n        self.agents.shuffle_do(\"say_wealth\")\n        \nstarter_model = MoneyModel(10)\nstarter_model.step()\n\nHi, I am an agent 3,and I have 1 dollars.\nHi, I am an agent 2,and I have 1 dollars.\nHi, I am an agent 4,and I have 1 dollars.\nHi, I am an agent 9,and I have 1 dollars.\nHi, I am an agent 10,and I have 1 dollars.\nHi, I am an agent 7,and I have 1 dollars.\nHi, I am an agent 8,and I have 1 dollars.\nHi, I am an agent 5,and I have 1 dollars.\nHi, I am an agent 6,and I have 1 dollars.\nHi, I am an agent 1,and I have 1 dollars."
  },
  {
    "objectID": "index.html#agents-交换财富",
    "href": "index.html#agents-交换财富",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.4 Agents 交换财富",
    "text": "2.4 Agents 交换财富\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n        self.wealth = 1\n        \n    # 定义 exchange 方法，让 Agent 交换财富\n    def exchange(self):\n        if self.wealth &gt; 0: # 有钱才能转账\n            # self.random, 是继承自 mesa.Agent 的随机数生成器\n            # .choice(...) 在列表中随机选择一个 Agent\n            # 这里的self.model是在上一步—__init__中传入的模型对象\n            other_agent = self.random.choice(self.model.agents)\n            \n            if other_agent is not None: # 确保选到了一个 Agent\n                other_agent.wealth += 1\n                self.wealth -= 1\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None):\n        super().__init__(seed = seed)\n        self.num_agents = n\n\n        MoneyAgent.create_agents(model=self, n=n)\n\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n\n        self.agents.shuffle_do(\"exchange\")\n\n\n2.4.1 运行模型\n\nmodel = MoneyModel(10, 1234)  # 创建 10 个 Agents\n\n# 这个 for 循环中 _ 是一个占位符\n# 表示我们不关心循环变量的值，也不关心现在运行了几次，只是想运行30次\nfor _ in range(30): \n    model.step()\n\n\n\n2.4.2 可视化\n\n# 获取每个 Agent 的 wealth，放入一个列表\nagent_wealth = [a.wealth for a in model.agents]\n# 绘制直方图\ng = sns.histplot(agent_wealth, discrete=True)\ng.set(\n    title=\"Wealth distribution\", xlabel=\"Wealth\", ylabel=\"number of agents\"\n);\nplt.show()\n\n\n\n\n\n\n\n\n\n2.4.2.1 传入 R 中用 ggplot2 可视化\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# 使用 iterate 函数遍历 model 中的 agents\nagent_wealth &lt;- map_dbl(iterate(py$model$agents), \"wealth\") %&gt;% \n  tibble(wealth = .)\n\nggplot(agent_wealth, aes(x = wealth)) +\n  geom_histogram(binwidth = 1, boundary = 0, closed = \"left\",\n                 color = \"black\", fill=\"red\") +\n  labs(\n    title = \"Wealth distribution\",\n    x     = \"Wealth\",\n    y     = \"Number of agents\"\n  )+ theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n2.4.3 创建多个模型对象\n为了更好地理解模型行为，可以创建多个模型对象，以观察整体分布。\n\n# 创建一个空列表来存储循环结果，与 R 中类似，可以使循环运行更快\nall_wealth = []\n# 运行 100 次模型，每个模型有 10 个 Agent，并运行 30 次 step\nfor _ in range(100):\n    model = MoneyModel(10)\n    for _ in range(30):\n        model.step()\n    # 注意这里的缩进，说明下面这个循环是在for _ in range(100):循环中\n    # 这样每次运行一个模型就会存储所有 Agent 的 wealth\n    for agent in model.agents:\n        # 注意这里使用了就地扩展 (append), 即直接向 all_wealth 列表添加元素\n        # 这是python的一个特性，直接在list后增加元素不是一个复杂的计算\n        all_wealth.append(agent.wealth)\n        \ng = sns.histplot(all_wealth, discrete=True)\ng.set(title=\"Wealth distribution\", xlabel=\"Wealth\", ylabel=\"number of agents\");\nplt.show()\n\n\n\n\n\n\n\n\n\n2.4.3.1 在 R 中运行模型\n\nmodels &lt;- map(1L:100L, ~{\n  model &lt;- py$MoneyModel(10L)\n  walk(1L:30L, ~ model$step())\n  model\n})\n\nall_wealth &lt;- map_dfr(models, \n                      ~map_dbl(iterate(.x$agents), \"wealth\") %&gt;% \n                        tibble(wealth = .))\n\nggplot(all_wealth, aes(x = wealth)) +\n  geom_histogram(binwidth = 1, boundary = 0, closed = \"left\",\n                 color = \"black\", fill=\"red\") +\n  labs(\n    title = \"Wealth distribution\",\n    x     = \"Wealth\",\n    y     = \"Number of agents\"\n  )+ theme_bw()"
  },
  {
    "objectID": "index.html#基础模型",
    "href": "index.html#基础模型",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "3.1 基础模型",
    "text": "3.1 基础模型\n以下模型即上述财富模型。\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n        self.wealth = 1\n\n    def exchange(self):\n        if self.wealth &gt; 0:\n            other_agent = self.random.choice(self.model.agents)\n            if other_agent is not None:\n                other_agent.wealth += 1\n                self.wealth -= 1\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n):\n        super().__init__()\n        self.num_agents = n\n        MoneyAgent.create_agents(model=self, n=n)\n\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n        self.agents.shuffle_do(\"exchange\")\n\n\nmodel = MoneyModel(10)\nmodel.step()\n\nprint(f\"You have {len(model.agents)} agents.\")\n\nYou have 10 agents."
  },
  {
    "objectID": "index.html#空间概念",
    "href": "index.html#空间概念",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "3.2 空间概念",
    "text": "3.2 空间概念\nMesa 提供两种空间类型：离散空间和连续空间。\n\n离散空间：Agent 占据单元格或节点\n连续空间：Agent 占据三维空间中的任何位置\n\n以下使用经典笛卡尔坐标系下的离散空间，具有两个模块：单元格 (cell) 和单元格 Agent。\n单元格类表示一个具备以下功能的位置：\n\n具有属性 (如温度、资源等)\n追踪并限制其包含的 Agent\n与相邻单元格连接\n提供邻居 (neighborhood) 的信息\n\n单元格 Agent 类：能够理解如何在单元格中存在和移动的 Agent。\n\nCellAgent: 可以在单元格间移动的 Agent。\nFixedAgent: 永久固定在单元格上的静止 Agent。\nGrid2DMovingAgent: 具有特定网格移动能力的 Agent。\n\n\n\n\nDiscrete Space\n\n\n\n网格 (Grid): 规则多边形\n\n摩尔邻域 (Moore Grid)：每个单元格的八个相邻单元格。\n冯诺依曼邻域 (Von Neumann Grid)：每个单元格的四个相邻单元格。\n六边形 (Hex Grid)：每个单元格的六个相邻单元格。\n\n网络 (Network): 每个格点是图中的一个节点，连接关系由边（edge）定义，适合社交网络、通信拓扑等场景。\n\n\n\n\nNetwork\n\n\n\nVoronoi: 不规则多边形划分空间：给定一组中心点，每块多边形就是一个 Cell，适用于地理空间等不规则网格情形。\n\n\n\n\nVoronoi"
  },
  {
    "objectID": "index.html#代码实现",
    "href": "index.html#代码实现",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "3.3 代码实现",
    "text": "3.3 代码实现\n\n3.3.1 创建 CellAgent\n为了使模型具有离散空间功能，我们将 MoneyAgent 实例化为 CellAgent。\nCellAgent 是 Agent 的一个子类，专门用于在离散空间 discrete space 模块中交互和移动。\n\n# 下面这行import相当于只从 mesa.discrete_space 中导入\n# CellAgent 和 OrthogonalMooreGrid 这两个类，如果此处导入\n# 那么下面使用时不需要写明 mesa.discrete_space.CellAgent\n# 而可以直接使用CellAgent，类似R中 dplyr::select 和 library(dplyr)\n# from mesa.discrete_space import CellAgent, OrthogonalMooreGrid\n\n# 使用父类 CellAgent 来创建一个新的 Agent 类 MoneyAgent\nclass MoneyAgent(mesa.discrete_space.CellAgent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model, cell): \n        super().__init__(model)\n        self.cell = cell  # 将 Agent 初始化在 (x,y)，这个位置由参数 cell 决定\n        self.wealth = 1\n\n    # 定义移动函数，控制 Agent 在单元格中移动\n    def move(self):\n        # 选择一个随机的相邻单元格，默认半径为 1\n        self.cell = self.cell.neighborhood.select_random_cell()\n    \n    # 定义交换财富函数\n    def give_money(self):\n        # 选择同一个单元格内所有非本身的 Agent\n        cellmates = [\n            a for a in self.cell.agents if a is not self\n        ] \n        # 如果自己的财富 &gt;0, 切存在同格内的其他 Agent\n        if self.wealth &gt; 0 and cellmates:\n            # 在所有同格内的 Agent 中随机选择一个\n            other_agent = self.random.choice(cellmates)\n            # 将自己的财富 -1，选中的 Agent 的财富 +1\n            other_agent.wealth += 1\n            self.wealth -= 1\n\n\n\n3.3.2 创建模型类\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, width, height, seed=None):\n        super().__init__(seed=seed)\n        self.num_agents = n\n        # 创建一个摩尔邻域 (每个单元格有 4 个邻居) 网格\n        self.grid = mesa.discrete_space.OrthogonalMooreGrid(\n            # 长宽参数由外部传入，torus控制启用周期性边界\n            # 即最右边和最左边相接，上下相接\n            # 每个单元格最大可以容纳 10 个 Agent\n            (width, height), torus=True, capacity=10, random=self.random\n        )\n\n        # 创建 Agent，这里和前面的模型不一样，新建的 Agent 被存入了列表 agents\n        # 因为立刻要对 agents 进行操作，要将其保存\n        # 如果直接调用 create_agents，模型中存在的是旧的+新建的 agents\n        # 如下写，每次都会覆盖 agents\n        agents = MoneyAgent.create_agents(\n            self, # model = self\n            self.num_agents, # n = self.num_agents\n            # 给每个 Agent 分配一个随机的单元格\n            # 从所有单元格中挑 k 次，k = Agent 的数量\n            self.random.choices(self.grid.all_cells.cells, k=self.num_agents),\n        )\n    \n    # 定义 step，每步运行一次移动和一次给钱\n    def step(self):\n        self.agents.shuffle_do(\"move\")\n        self.agents.do(\"give_money\")\n\n\n\n3.3.3 运行模型\n在一个 10x10 的网格上创建一个包含 100 个智能体的模型，并运行 20 步。\n\nmodel = MoneyModel(100, 10, 10, 1234)\nfor _ in range(20):\n    model.step()\n\n\n\n3.3.4 可视化\n\nagent_counts = np.zeros((model.grid.width, model.grid.height))\n\nfor cell in model.grid.all_cells:\n    agent_counts[cell.coordinate] = len(cell.agents)\n\ng = sns.heatmap(agent_counts, cmap=\"viridis\", annot=True, cbar=False, square=True)\ng.figure.set_size_inches(5, 5)\ng.set(title=\"Number of agents on each cell of the grid\");\nplt.show()\n\n\n\n\n\n\n\n\n\n3.3.4.1 用 R 运行模型\n使用 ggplot2 手动绘制。\n\nlibrary(tidyverse)\n\nmodel = py$MoneyModel(100L, 10L, 10L, 1234L)\nwalk(1:20L, ~model$step())\n\nagent_counts &lt;- map_dfr(\n  iterate(model$grid$all_cells),\n  ~{\n    coord &lt;- as.numeric(.x$coordinate)\n    tibble(\n      col   = coord[1],\n      row   = coord[2],\n      count = length(.x$agents)\n    )\n  }\n)\n\nggplot(agent_counts,aes(col, row, fill = count, label = count)) +\n  geom_tile() +\n  geom_text(color = \"white\") +\n  scale_fill_viridis_c(option = \"viridis\") + \n  scale_x_continuous(breaks = seq(min(agent_counts$col),\n                                  max(agent_counts$col), by = 1),\n                     expand = c(0,0)) +\n  scale_y_reverse(breaks = seq(min(agent_counts$row),\n                               max(agent_counts$row), by = 1),\n                     expand = c(0,0)) +\n  coord_fixed() + \n  theme_minimal() +\n  ggtitle(\"Number of agents on each cell of the grid\") +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_text(hjust = 0.5)\n  ) +\n  labs(x = NULL, y = NULL)\n\n\n\n\n\n\n\n\n或者调用一些更方便的包，如 tidyheatmaps。\n\nlibrary(tidyheatmaps)\ntidyheatmap(agent_counts, row, col, count, colors = viridis::viridis(100),\n            display_numbers = T, number_format = \"%.0f\", number_color = \"white\",\n            fontsize_number = 10,legend = F,cellwidth = 30, cellheigh = 30,\n            angle_col = 0,\n            main = \"Number of agents on each cell of the grid\")\n\n\n\n\n\n\n\n\n\n\n\n3.3.5 模型修改练习\n\n3.3.5.1 改变网格尺寸\n将网格尺寸从 10x10 改为 20x20，并运行模型。\n\nmodel = py$MoneyModel(100L, 20L, 20L, 1234L)\nwalk(1:20L, ~model$step())\n\nagent_counts &lt;- map_dfr(\n  iterate(model$grid$all_cells),\n  ~{\n    coord &lt;- as.numeric(.x$coordinate)\n    tibble(\n      col   = coord[1],\n      row   = coord[2],\n      count = length(.x$agents)\n    )\n  }\n)\n\ntidyheatmap(agent_counts, row, col, count, colors = viridis::viridis(100),\n            display_numbers = T, number_format = \"%.0f\", number_color = \"white\",\n            fontsize_number = 10,legend = F,cellwidth = 15, cellheigh = 15,\n            angle_col = 0,\n            main = \"Number of agents on each cell of the grid\")\n\n\n\n\n\n\n\n\n\n\n3.3.5.2 改变单元格容量\n将单元格容量从 10 改为 3，并运行模型。\n\nmodel = py$MoneyModel(100L, 10L, 10L, 1234L)\nmodel$grid$capacity = 3L\nwalk(1:20L, ~model$step())\n\nagent_counts &lt;- map_dfr(\n  iterate(model$grid$all_cells),\n  ~{\n    coord &lt;- as.numeric(.x$coordinate)\n    tibble(\n      col   = coord[1],\n      row   = coord[2],\n      count = length(.x$agents)\n    )\n  }\n)\n\ntidyheatmap(agent_counts, row, col, count, colors = viridis::viridis(100),\n            display_numbers = T, number_format = \"%.0f\", number_color = \"white\",\n            fontsize_number = 10,legend = F,cellwidth = 30, cellheigh = 30,\n            angle_col = 0,\n            main = \"Number of agents on each cell of the grid\")\n\n\n\n\n\n\n\n\n\n\n3.3.5.3 改为正交冯诺依曼\n将网格从摩尔邻域改为正交冯诺依曼邻域。\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, width, height, seed=None):\n        super().__init__(seed=seed)\n        self.num_agents = n\n        self.grid = mesa.discrete_space.OrthogonalVonNeumannGrid(\n            (width, height), torus=True, capacity=10, random=self.random\n        )\n\n        agents = MoneyAgent.create_agents(\n            self,\n            self.num_agents,\n            self.random.choices(self.grid.all_cells.cells, k=self.num_agents),\n        )\n\n    def step(self):\n        self.agents.shuffle_do(\"move\")\n        self.agents.do(\"give_money\")\n\n\nmodel = py$MoneyModel(100L, 10L, 10L, 1234L)\nwalk(1:20L, ~model$step())\n\nagent_wealth &lt;- map_dbl(iterate(py$model$agents), \"wealth\") %&gt;% \n  tibble(wealth = .)\n\nggplot(agent_wealth, aes(x = wealth)) +\n  geom_histogram(binwidth = 1, boundary = 0, closed = \"left\",\n                 color = \"black\", fill=\"red\") +\n  labs(\n    title = \"Wealth distribution\",\n    x     = \"Wealth\",\n    y     = \"Number of agents\"\n  )+ theme_bw()"
  },
  {
    "objectID": "index.html#创建-model-level-数据收集",
    "href": "index.html#创建-model-level-数据收集",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "5.1 创建 model-level 数据收集",
    "text": "5.1 创建 model-level 数据收集\n\nfrom mesa.discrete_space import CellAgent, OrthogonalMooreGrid\ndef compute_gini(model):\n  agent_wealth = [agent.wealth for agent in model.agents]\n  x = sorted(agent_wealth)\n  n = model.num_agents\n  # 计算基尼系数\n  B = sum(xi * (n - i) for i, xi in enumerate(x)) / sum(x)\n  # !!!注意这里，python不会自动返回最后一个值，必须显式返回\n  return 1 + (1 / n) - 2 * B\n\nclass MoneyAgent(CellAgent):\n  def __init__(self, model, cell):\n    super().__init__(model)\n    self.cell = cell\n    self.wealth = 1\n  def move(self):\n    self.cell = self.cell.neighborhood.select_random_cell()\n  def give_money(self):\n    cellmates = [a for a in self.cell.agents if a is not self]\n    if self.wealth &gt; 0 and cellmates:\n      other_agent = self.random.choice(cellmates)\n      other_agent.wealth += 1\n      self.wealth -= 1\n\nclass MoneyModel(mesa.Model):\n  def __init__(self, n, width, height, seed = None):\n    super().__init__(seed = seed)\n    self.num_agents = n\n    self.grid = OrthogonalMooreGrid(\n        (width, height), torus=True, capacity=10, random=self.random\n    )\n    # 实例化数据收集器 (DataCollector)\n    self.datacollector = mesa.DataCollector(\n      model_reporters = {\"Gini\": compute_gini}, \n      agent_reporters = {\"Wealth\": \"wealth\"}\n    )\n    agents = MoneyAgent.create_agents(\n      self,\n      self.num_agents,\n      self.random.choices(self.grid.all_cells.cells, k = self.num_agents)\n    )\n  def step(self):\n    # 在每个 step 中收集数据\n    self.datacollector.collect(self)\n    self.agents.shuffle_do(\"move\")\n    self.agents.do(\"give_money\")"
  },
  {
    "objectID": "index.html#获取-model_level-数据",
    "href": "index.html#获取-model_level-数据",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "5.2 获取 model_level 数据",
    "text": "5.2 获取 model_level 数据\n\nmodel = MoneyModel(100, 10, 10, 1234)\nfor _ in range(100):\n    model.step()\n\ngini = model.datacollector.get_model_vars_dataframe()\ng = sns.lineplot(data=gini)\ng.set(title=\"Gini Coefficient over Time\", ylabel=\"Gini Coefficient\");\nplt.show()\n\n\n\n\n\n\n\n\n\n5.2.1 在 R 中运行模型\n\nmodel = py$MoneyModel(100L, 10L, 10L, 1234L)\nwalk(1:100L, ~model$step())\n\n# 可以直接这样调用 python 的 function\ngini = model$datacollector$get_model_vars_dataframe()  %&gt;%  \n  rownames_to_column(\"step\") %&gt;% mutate(step = as.numeric(step))\ngini %&gt;% \n  ggplot(aes(x = step, y = Gini)) +\n  geom_line(color = \"steelblue\") +\n  labs(\n    title = \"Gini Coefficient over Time\",\n    x     = \"Step\",\n    y     = \"Gini Coefficient\"\n  ) + theme_bw()"
  },
  {
    "objectID": "index.html#练习",
    "href": "index.html#练习",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "5.3 练习",
    "text": "5.3 练习\n\n5.3.1 仅显示数据以查看格式\n\npy$gini %&gt;% \n  rownames_to_column(\"step\") %&gt;% \n  mutate(step = as.numeric(step)) %&gt;% \n  head(6)\n\n  step   Gini\n1    1 -99.99\n2    2 -92.31\n3    3 -85.27\n4    4 -73.97\n5    5 -66.97\n6    6 -62.53\n\n\n\n\n5.3.2 增加 Agent 的数量和时间\n\n5.3.2.1 增加数量\n\nmodel = py$MoneyModel(400L, 20L, 20L, 1234L)\nwalk(1:100L, ~model$step())\n\ngini_r = model$datacollector$get_model_vars_dataframe()  %&gt;%  \n  rownames_to_column(\"step\") %&gt;% mutate(step = as.numeric(step))\ngini_r %&gt;% \n  ggplot(aes(x = step, y = Gini)) +\n  geom_line() +\n  labs(\n    title = \"Gini Coefficient over Time\",\n    x     = \"Step\",\n    y     = \"Gini Coefficient\"\n  ) + theme_bw()\n\n\n\n\n\n\n\n\n\n\n5.3.2.2 增加时间\n\nmodel = py$MoneyModel(100L, 10L, 10L, 1234L)\nwalk(1:1000L, ~model$step())\n\ngini_r = model$datacollector$get_model_vars_dataframe()  %&gt;%  \n  rownames_to_column(\"step\") %&gt;% mutate(step = as.numeric(step))\ngini_r %&gt;% \n  ggplot(aes(x = step, y = Gini)) +\n  geom_line() +\n  labs(\n    title = \"Gini Coefficient over Time\",\n    x     = \"Step\",\n    y     = \"Gini Coefficient\"\n  ) + theme_bw()"
  },
  {
    "objectID": "index.html#获取-agent_level-数据",
    "href": "index.html#获取-agent_level-数据",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "5.4 获取 agent_level 数据",
    "text": "5.4 获取 agent_level 数据\n绘制每个 Agent 在最后一步的财富分布。\n\nagent_wealth = model.datacollector.get_agent_vars_dataframe()\nagent_wealth.head()\n\n              Wealth\nStep AgentID        \n1    1             1\n     2             1\n     3             1\n     4             1\n     5             1\n\nlast_step = agent_wealth.index.get_level_values(\"Step\").max()\nend_wealth = agent_wealth.xs(last_step, level=\"Step\")[\n    \"Wealth\"\n]\n\ng = sns.histplot(end_wealth, discrete=True)\ng.set(\n    title=\"Distribution of wealth at the end of simulation\",\n    xlabel=\"Wealth\",\n    ylabel=\"number of agents\",\n);\nplt.show()\n\n\n\n\n\n\n\n\n\nmodel = py$MoneyModel(100L, 10L, 10L, 1234L)\nwalk(1:100L, ~model$step())\n\n# 这里有一点麻烦的是，numpy会建立一种多重索引的数据结构\n# 转化为 R tibble 时会丢掉所有索引\n# 但直接在 R 中 call \n# py$model$datacollector$get_agent_vars_dataframe()$reset_index()\n# 会出现问题，因此在 R 中进行了一次转换，!!!目前 reticulate 还没有提供更好的解决方法\nagent_wealth &lt;- model$datacollector$get_agent_vars_dataframe() %&gt;% \n  bind_cols(\n  attributes(.)$pandas.index$to_frame() %&gt;% py_to_r(),\n  .\n)\n\nhead(agent_wealth)\n\n  Step AgentID Wealth\n1    1       1      1\n2    1       2      1\n3    1       3      1\n4    1       4      1\n5    1       5      1\n6    1       6      1\n\nend_wealth = agent_wealth %&gt;% \n  filter(Step == max(Step))\n\nggplot()+\n  geom_histogram(data = end_wealth, aes(Wealth), \n               binwidth = 1, \n               color = \"black\", fill=\"steelblue\")+\n  ggtitle(\"Distribution of wealth at the end of simulation\")+\n  xlab(\"Wealth\")+\n  ylab(\"Number of agents\")+\n  theme_bw()\n\n\n\n\n\n\n\n\n绘制 Agent 8 的财富变化。\n\nagent_wealth %&gt;% filter(AgentID == 8) %&gt;% \n  ggplot()+\n  geom_line(aes(Step, Wealth),color = \"steelblue\")+\n  ggtitle(\"Wealth of agent 8 over time\")+\n  theme_bw()\n\n\n\n\n\n\n\n\n绘制多个 Agent 的财富变化。\n\nagent_wealth %&gt;% filter(AgentID %in% c(3, 14, 25)) %&gt;% \n  ggplot()+\n  geom_line(aes(Step, Wealth,color = factor(AgentID)))+\n  ggtitle(\"Wealth of agent 3, 4 and 25 over time\")+\n  theme_bw()\n\n\n\n\n\n\n\n\n绘制所有 Agent 的财富的平均值和置信区间。\n\nagent_wealth %&gt;% \n  group_by(Step) %&gt;% \n  summarise(mean = mean(Wealth), \n            lower = mean(Wealth) - 1.96 * sd(Wealth)/sqrt(n()), \n            upper = mean(Wealth) + 1.96 * sd(Wealth)/sqrt(n())) %&gt;% \n  ggplot()+\n  geom_line(aes(Step, mean),color = \"steelblue\")+\n  geom_ribbon(aes(Step, ymin = lower, ymax = upper),\n              fill = \"steelblue\", alpha = 0.2)+\n  ggtitle(\"Average wealth over time\")+\n  theme_bw()\n\n\n\n\n\n\n\nggplot(agent_wealth, aes(x = Step, y = Wealth, group = 1)) +\n  stat_summary(\n    geom      = \"ribbon\",\n    fun.data  = mean_cl_normal,\n    fun.args  = list(conf.int = 0.95),\n    fill      = \"steelblue\",\n    alpha     = 0.2\n  ) +\n  stat_summary(\n    geom = \"line\",\n    fun  = mean,\n    colour = \"steelblue\"\n  ) +\n  ggtitle(\"Average wealth over time\") +\n  theme_bw()"
  },
  {
    "objectID": "index.html#选择",
    "href": "index.html#选择",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "6.1 选择",
    "text": "6.1 选择\n在这个模型变体中，将使用 agents.select 把 Agent 分为贫富两种。\n\ndef compute_gini(model):\n    agent_wealths = [agent.wealth for agent in model.agents]\n    x = sorted(agent_wealths)\n    n = model.num_agents\n    B = sum(xi * (n - i) for i, xi in enumerate(x)) / (n * sum(x))\n    return 1 + (1 / n) - 2 * B\n\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n        self.wealth = 1\n    # 在这里定义了只给poor_agents 传递财富\n    def give_money(self, poor_agents):\n        if self.wealth &gt; 0:\n            other_agent = self.random.choice(poor_agents)\n            other_agent.wealth += 1\n            self.wealth -= 1\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n):\n        super().__init__()\n        self.num_agents = n\n\n        MoneyAgent.create_agents(model=self, n=n)\n\n        self.datacollector = mesa.DataCollector(\n            model_reporters={\"Gini\": compute_gini}, \n            agent_reporters={\"Wealth\": \"wealth\"}\n        )\n\n    def step(self):\n        self.datacollector.collect(self)\n        # 用 agent.select 获取贫富 Agent 的列表\n        # 这里的 lambda 等于 R 的匿名函数 ~\n        # 在原本的教程中，这里写作model.agents.select\n        # 这在原生 python 环境中没有问题，因为在调用 model = MoneyModel(100) 时\n        # 会创建全局变量 model，但在 R 中运行模型时，无法找到\n        # 因此在这里改写成了更规范的 self.agents.select\n        rich_agents = self.agents.select(lambda a: a.wealth &gt;= 3)\n        poor_agents = self.agents.select(lambda a: a.wealth &lt; 3)\n        # 当有富裕的 Agent 时，富裕的 Agent 给贫穷的 Agent 传递财富\n        if len(rich_agents) &gt; 0:\n            rich_agents.shuffle_do(\"give_money\", poor_agents)\n        else:\n            poor_agents.shuffle_do(\"give_money\", poor_agents)\n\n\nmodel = py$MoneyModel(100L)\nwalk(1:20L, ~model$step())\n\nagent_wealth &lt;- model$datacollector$get_agent_vars_dataframe() %&gt;% \n  bind_cols(\n  attributes(.)$pandas.index$to_frame() %&gt;% py_to_r(),\n  .\n)\n\nagent_wealth  %&gt;%\n  ggplot() +\n  geom_histogram(aes(Wealth), fill = \"steelblue\",binwidth = 1, color = \"black\") +\n  labs(\n    title = \"Wealth distribution\",\n    x     = \"Wealth\",\n    y     = \"Number of agents\"\n  ) + theme_bw()"
  },
  {
    "objectID": "index.html#分组",
    "href": "index.html#分组",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "6.2 分组",
    "text": "6.2 分组\n通过一个 characteristics 将 Agent 分组, 例如提供 Green、Blue 和 Mixed 的种族属性，只在同种族内给钱。\n\ndef compute_gini(model):\n    agent_wealths = [agent.wealth for agent in model.agents]\n    x = sorted(agent_wealths)\n    n = model.num_agents\n    B = sum(xi * (n - i) for i, xi in enumerate(x)) / (n * sum(x))\n    return 1 + (1 / n) - 2 * B\n  \nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model, ethnicity):\n        super().__init__(model)\n        self.wealth = 1\n        # 定义 Agent 的种族\n        self.ethnicity = ethnicity\n\n    def give_money(self, similars):\n        if self.wealth &gt; 0:\n            # 从同种族的 Agent 中随机选择一个\n            other_agent = self.random.choice(similars)\n            other_agent.wealth += 1\n            self.wealth -= 1\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n):\n        super().__init__()\n        self.num_agents = n\n\n        # 创建一个种族列表\n        ethnicities = [\"Green\", \"Blue\", \"Mixed\"]\n\n        MoneyAgent.create_agents(\n            model=self,\n            n=self.num_agents,\n            # 从种族列表中随机选择种族\n            ethnicity=self.random.choices(ethnicities, k=self.num_agents),\n        )\n\n        self.datacollector = mesa.DataCollector(\n            model_reporters={\"Gini\": compute_gini},\n            agent_reporters={\"Wealth\": \"wealth\", \"Ethnicity\": \"ethnicity\"},\n        )\n\n    def step(self):\n        self.datacollector.collect(self)\n        # 创建一个字典，存储 Agent 的种族\n        grouped_agents = self.agents.groupby(\"ethnicity\")\n        for ethnic, similars in grouped_agents:\n            if ethnic != \"Mixed\":\n                similars.shuffle_do(\"give_money\", similars)\n            else:\n                similars.shuffle_do(\n                    \"give_money\", self.agents\n                )  # Mixed 可以给所有人钱\n\n\nmodel = py$MoneyModel(100L)\nwalk(1:20L, ~model$step())\n\nagent_wealth &lt;- model$datacollector$get_agent_vars_dataframe() %&gt;% \n  bind_cols(\n  attributes(.)$pandas.index$to_frame() %&gt;% py_to_r(),\n  .\n)\n\nagent_wealth %&gt;% \n  ggplot()+\n  geom_histogram(aes(Wealth, fill = Ethnicity),binwidth = 1, color = \"black\")+\n  theme_bw()+\n  scale_fill_manual(values = c(\"Green\" = \"darkgreen\", \n                               \"Blue\" = \"darkblue\", \n                               \"Mixed\" = \"purple3\")) +\n  labs(title = \"Wealth distribution\")"
  }
]