[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "在R中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "(只需要运行一次)\n\nlibrary(reticulate)\ninstall_miniconda()\nconda_create(envname = \"mesa-abm\", python_version = \"3.13.5\")\npy_install(c(\"mesa[all]\",\"seaborn\"), envname = \"mesa-abm\", pip = TRUE)\n\n\n\n\n(每次都需要运行)\n\nlibrary(reticulate)\nuse_condaenv(\"mesa-abm\", required = TRUE)\n\n\n\n\n\nimport mesa\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "index.html#安装-python-环境并安装-mesa",
    "href": "index.html#安装-python-环境并安装-mesa",
    "title": "在R中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "(只需要运行一次)\n\nlibrary(reticulate)\ninstall_miniconda()\nconda_create(envname = \"mesa-abm\", python_version = \"3.13.5\")\npy_install(c(\"mesa[all]\",\"seaborn\"), envname = \"mesa-abm\", pip = TRUE)"
  },
  {
    "objectID": "index.html#启动-python-环境",
    "href": "index.html#启动-python-环境",
    "title": "在R中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "(每次都需要运行)\n\nlibrary(reticulate)\nuse_condaenv(\"mesa-abm\", required = TRUE)"
  },
  {
    "objectID": "index.html#导入需要的-python-模块",
    "href": "index.html#导入需要的-python-模块",
    "title": "在R中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "import mesa\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "index.html#创建-agent-类",
    "href": "index.html#创建-agent-类",
    "title": "在R中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.1 创建 Agent 类",
    "text": "2.1 创建 Agent 类\nMesa 会自动为每个创建的 Agent 分配一个整数作为 unique_id。\n下面这段代码创建了一个新类 (class) MoneyAgent，继承了 mesa.Agent 类的属性。\nmesa.Agent 是 Mesa 模块中定义的一个基类，所有的 Agent 都应该继承这个类。\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n    \n    #初始化，每次使用 MoneyAgent 创建新对象时都会使用如下初始化\n    def __init__(self, model): #self代表当前对象，model 代表模型对象\n      \n        # 将父类中的参数 model (mesa.Agent) 传入，让Agent知道自己所属的模型\n        super().__init__(model)\n\n        # 创建 Agent 的变量 wealth 并设置初始值\n        self.wealth = 1"
  },
  {
    "objectID": "index.html#创建模型类",
    "href": "index.html#创建模型类",
    "title": "在R中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.2 创建模型类",
    "text": "2.2 创建模型类\n创建一个模型类，继承自 mesa.Model，负责创建、保存和管理所有 Agent。\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None): # n是创建的 Agent 数量，seed 是随机种子\n        super().__init__(seed=seed)\n        #在self (即当前模型) 中创建一个属性 num_agents，保存 Agent 的数量\n        self.num_agents = n \n        # 调用类方法 create_agents，创建 n 个 Agent\n        MoneyAgent.create_agents(model=self, n=n)"
  },
  {
    "objectID": "index.html#让-agents-do",
    "href": "index.html#让-agents-do",
    "title": "在R中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.3 让 Agents “do”",
    "text": "2.3 让 Agents “do”\n通过 do 让 ABM 运行起来，mesa 中的 do 可以按不同的顺序激活 Agent。\n在每一个 step 中，(通常) 每一个 Agent 都会被激活并采取自己的行动，在内部发生变化和/或与彼此或者环境交互。\n此处使用 agent.shuffle_do() 来实现随机重新排序激活顺序。\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n        self.wealth = 1\n        #以上代码同上\n        \n        # 定义一个方法 say_hi，每个 step 中都会被调用\n    def say_hi(self):\n        # 为了演示，输出了每个 Agent 的 unique_id\n        print(f\"Hi, I am an agent, you can call me {str(self.unique_id)}.\")\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None):\n        super().__init__(seed=seed)\n        self.num_agents = n\n\n        MoneyAgent.create_agents(model=self, n=n)\n        #以上代码同上\n\n    # 定义模型的 step 方法\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n        \n        #随机重新排序 Agent 的激活顺序，并调用每个 Agent 的 say_hi 方法\n        self.agents.shuffle_do(\"say_hi\")\n\n\n2.3.1 运行模型\n创建一个模型对象 (object) 并运行它的 step 方法。\n\n#创建模型对象 starter_model，使用 MoneyModel 类\n#此处的 10 对应 MoneyModel 类的第二个参数 n，表示创建 10 个 Agent\nstarter_model = MoneyModel(10)\n\n#运行模型的 step 方法，激活所有 Agent\nstarter_model.step()\n\nHi, I am an agent, you can call me 4.\nHi, I am an agent, you can call me 10.\nHi, I am an agent, you can call me 3.\nHi, I am an agent, you can call me 6.\nHi, I am an agent, you can call me 2.\nHi, I am an agent, you can call me 9.\nHi, I am an agent, you can call me 1.\nHi, I am an agent, you can call me 5.\nHi, I am an agent, you can call me 7.\nHi, I am an agent, you can call me 8.\n\n\n如果在创建对象时传入了 seed 参数，则每次运行模型时 Agent 的顺序会保持一致。\n\nstarter_model = MoneyModel(10, seed = 1234)\nstarter_model.step()\n\nHi, I am an agent, you can call me 3.\nHi, I am an agent, you can call me 9.\nHi, I am an agent, you can call me 4.\nHi, I am an agent, you can call me 6.\nHi, I am an agent, you can call me 7.\nHi, I am an agent, you can call me 5.\nHi, I am an agent, you can call me 10.\nHi, I am an agent, you can call me 1.\nHi, I am an agent, you can call me 2.\nHi, I am an agent, you can call me 8.\n\n\n\n\n2.3.2 模型修改练习\n在原有模型的基础上，让 Agent 在激活时输出自己的 wealth。\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n\n        self.wealth = 1\n\n    # 定义 say_wealth 方法，输出 Agent 的 wealth\n    def say_wealth(self):\n        print(f\"Hi, I am an agent {self.unique_id},\"\n              f\"and I have {self.wealth} dollars.\")\n        \nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None):\n        super().__init__(seed=seed)\n        self.num_agents = n\n\n        MoneyAgent.create_agents(model=self, n=n)\n\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n        \n        self.agents.shuffle_do(\"say_wealth\")\n        \nstarter_model = MoneyModel(10)\nstarter_model.step()\n\nHi, I am an agent 3,and I have 1 dollars.\nHi, I am an agent 4,and I have 1 dollars.\nHi, I am an agent 7,and I have 1 dollars.\nHi, I am an agent 6,and I have 1 dollars.\nHi, I am an agent 10,and I have 1 dollars.\nHi, I am an agent 1,and I have 1 dollars.\nHi, I am an agent 2,and I have 1 dollars.\nHi, I am an agent 5,and I have 1 dollars.\nHi, I am an agent 8,and I have 1 dollars.\nHi, I am an agent 9,and I have 1 dollars."
  },
  {
    "objectID": "index.html#agents-交换财富",
    "href": "index.html#agents-交换财富",
    "title": "在R中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.4 Agents 交换财富",
    "text": "2.4 Agents 交换财富\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n        self.wealth = 1\n        \n    # 定义 exchange 方法，让 Agent 交换财富\n    def exchange(self):\n        if self.wealth &gt; 0: #有钱才能转账\n            #self.random, 是继承自 mesa.Agent 的随机数生成器\n            #.choice(...) 在列表中随机选择一个 Agent\n            #这里的self.model是在上一步—__init__中传入的模型对象\n            other_agent = self.random.choice(self.model.agents)\n            \n            if other_agent is not None: #确保选到了一个 Agent\n                other_agent.wealth += 1\n                self.wealth -= 1\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None):\n        super().__init__(seed = seed)\n        self.num_agents = n\n\n        MoneyAgent.create_agents(model=self, n=n)\n\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n\n        self.agents.shuffle_do(\"exchange\")\n\n\n2.4.1 运行模型\n\nmodel = MoneyModel(1000, 1234)  # 创建 1000 个 Agents\n\n#这个 for 循环中 _ 是一个占位符\n#表示我们不关心循环变量的值，也不关心现在运行了几次，只是想运行30次\nfor _ in range(30): \n    model.step()\n\n\n\n2.4.2 可视化\n\n# 获取每个 Agent 的 wealth，放入一个列表\nagent_wealth = [a.wealth for a in model.agents]\n# 绘制直方图\ng = sns.histplot(agent_wealth, discrete=True)\ng.set(\n    title=\"Wealth distribution\", xlabel=\"Wealth\", ylabel=\"number of agents\"\n);\nplt.show()\n\n\n\n\n\n\n\n\n\n\n2.4.3 传入 R 中用 ggplot2 可视化\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#所有的 python 对象都可以用 py$... 来访问\nagent_wealth_r &lt;- tibble(wealth = py$agent_wealth)\n\nggplot(agent_wealth_r, aes(x = wealth)) +\n  geom_histogram(binwidth = 1, boundary = 0, closed = \"left\",\n                 color = \"black\", fill=\"red\") +\n  labs(\n    title = \"Wealth distribution\",\n    x     = \"Wealth\",\n    y     = \"Number of agents\"\n  )+ theme_bw()"
  }
]