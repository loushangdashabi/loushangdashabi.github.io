[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "(只需要运行一次)\n\nlibrary(reticulate)\ninstall_miniconda()\nconda_create(envname = \"mesa-abm\", python_version = \"3.13.5\")\npy_install(c(\"mesa[all]\",\"seaborn\"), envname = \"mesa-abm\", pip = TRUE)\n\n\n\n\n(每次都需要运行)\n\nlibrary(reticulate)\nuse_condaenv(\"mesa-abm\", required = TRUE)\n\n\n\n\n\nimport mesa\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "index.html#安装-python-环境并安装-mesa",
    "href": "index.html#安装-python-环境并安装-mesa",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "(只需要运行一次)\n\nlibrary(reticulate)\ninstall_miniconda()\nconda_create(envname = \"mesa-abm\", python_version = \"3.13.5\")\npy_install(c(\"mesa[all]\",\"seaborn\"), envname = \"mesa-abm\", pip = TRUE)"
  },
  {
    "objectID": "index.html#启动-python-环境",
    "href": "index.html#启动-python-环境",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "(每次都需要运行)\n\nlibrary(reticulate)\nuse_condaenv(\"mesa-abm\", required = TRUE)"
  },
  {
    "objectID": "index.html#导入需要的-python-模块",
    "href": "index.html#导入需要的-python-模块",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "",
    "text": "import mesa\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "index.html#创建-agent-类",
    "href": "index.html#创建-agent-类",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.1 创建 Agent 类",
    "text": "2.1 创建 Agent 类\nMesa 会自动为每个创建的 Agent 分配一个整数作为 unique_id。\n下面这段代码创建了一个新类 (class) MoneyAgent，继承了 mesa.Agent 类的属性。\nmesa.Agent 是 Mesa 模块中定义的一个基类，所有的 Agent 都应该继承这个类。\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n    \n    #初始化，每次使用 MoneyAgent 创建新对象时都会使用如下初始化\n    def __init__(self, model): #self代表当前对象，model 代表模型对象\n      \n        # 将父类中的参数 model (mesa.Agent) 传入，让Agent知道自己所属的模型\n        super().__init__(model)\n\n        # 创建 Agent 的变量 wealth 并设置初始值\n        self.wealth = 1"
  },
  {
    "objectID": "index.html#创建模型类",
    "href": "index.html#创建模型类",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.2 创建模型类",
    "text": "2.2 创建模型类\n创建一个模型类，继承自 mesa.Model，负责创建、保存和管理所有 Agent。\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None): # n 是创建的 Agent 数量，seed 是随机种子\n        super().__init__(seed=seed)\n        #在self (即当前模型) 中创建一个属性 num_agents，保存 Agent 的数量\n        self.num_agents = n \n        # 调用类方法 create_agents，创建 n 个 Agent\n        MoneyAgent.create_agents(model=self, n=n)"
  },
  {
    "objectID": "index.html#让-agents-do",
    "href": "index.html#让-agents-do",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.3 让 Agents “do”",
    "text": "2.3 让 Agents “do”\n通过 do 让 ABM 运行起来，mesa 中的 do 可以按不同的顺序激活 Agent。\n在每一个 step 中，(通常) 每一个 Agent 都会被激活并采取自己的行动，在内部发生变化和/或与彼此或者环境交互。\n此处使用 agent.shuffle_do() 来实现随机重新排序激活顺序。\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n        self.wealth = 1\n        #以上代码同上\n        \n        # 定义一个方法 say_hi，每个 step 中都会被调用\n    def say_hi(self):\n        # 为了演示，输出了每个 Agent 的 unique_id\n        print(f\"Hi, I am an agent, you can call me {str(self.unique_id)}.\")\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None):\n        super().__init__(seed=seed)\n        self.num_agents = n\n\n        MoneyAgent.create_agents(model=self, n=n)\n        #以上代码同上\n\n    # 定义模型的 step 方法\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n        \n        #随机重新排序 Agent 的激活顺序，并调用每个 Agent 的 say_hi 方法\n        self.agents.shuffle_do(\"say_hi\")\n\n\n2.3.1 运行模型\n创建一个模型对象 (object) 并运行它的 step 方法。\n\n#创建模型对象 starter_model，使用 MoneyModel 类\n#此处的 10 对应 MoneyModel 类的第二个参数 n，表示创建 10 个 Agent\nstarter_model = MoneyModel(10)\n\n#运行模型的 step 方法，激活所有 Agent\nstarter_model.step()\n\nHi, I am an agent, you can call me 10.\nHi, I am an agent, you can call me 3.\nHi, I am an agent, you can call me 5.\nHi, I am an agent, you can call me 4.\nHi, I am an agent, you can call me 8.\nHi, I am an agent, you can call me 9.\nHi, I am an agent, you can call me 7.\nHi, I am an agent, you can call me 6.\nHi, I am an agent, you can call me 1.\nHi, I am an agent, you can call me 2.\n\n\n如果在创建对象时传入了 seed 参数，则每次运行模型时 Agent 的顺序会保持一致。\n\nstarter_model = MoneyModel(10, seed = 1234)\nstarter_model.step()\n\nHi, I am an agent, you can call me 3.\nHi, I am an agent, you can call me 9.\nHi, I am an agent, you can call me 4.\nHi, I am an agent, you can call me 6.\nHi, I am an agent, you can call me 7.\nHi, I am an agent, you can call me 5.\nHi, I am an agent, you can call me 10.\nHi, I am an agent, you can call me 1.\nHi, I am an agent, you can call me 2.\nHi, I am an agent, you can call me 8.\n\n\n\n\n2.3.2 模型修改练习\n在原有模型的基础上，让 Agent 在激活时输出自己的 wealth。\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n\n        self.wealth = 1\n\n    # 定义 say_wealth 方法，输出 Agent 的 wealth\n    def say_wealth(self):\n        print(f\"Hi, I am an agent {self.unique_id},\"\n              f\"and I have {self.wealth} dollars.\")\n        \nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None):\n        super().__init__(seed=seed)\n        self.num_agents = n\n\n        MoneyAgent.create_agents(model=self, n=n)\n\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n        \n        self.agents.shuffle_do(\"say_wealth\")\n        \nstarter_model = MoneyModel(10)\nstarter_model.step()\n\nHi, I am an agent 6,and I have 1 dollars.\nHi, I am an agent 9,and I have 1 dollars.\nHi, I am an agent 2,and I have 1 dollars.\nHi, I am an agent 10,and I have 1 dollars.\nHi, I am an agent 7,and I have 1 dollars.\nHi, I am an agent 1,and I have 1 dollars.\nHi, I am an agent 8,and I have 1 dollars.\nHi, I am an agent 4,and I have 1 dollars.\nHi, I am an agent 3,and I have 1 dollars.\nHi, I am an agent 5,and I have 1 dollars."
  },
  {
    "objectID": "index.html#agents-交换财富",
    "href": "index.html#agents-交换财富",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "2.4 Agents 交换财富",
    "text": "2.4 Agents 交换财富\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n        self.wealth = 1\n        \n    # 定义 exchange 方法，让 Agent 交换财富\n    def exchange(self):\n        if self.wealth &gt; 0: #有钱才能转账\n            #self.random, 是继承自 mesa.Agent 的随机数生成器\n            #.choice(...) 在列表中随机选择一个 Agent\n            #这里的self.model是在上一步—__init__中传入的模型对象\n            other_agent = self.random.choice(self.model.agents)\n            \n            if other_agent is not None: #确保选到了一个 Agent\n                other_agent.wealth += 1\n                self.wealth -= 1\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, seed=None):\n        super().__init__(seed = seed)\n        self.num_agents = n\n\n        MoneyAgent.create_agents(model=self, n=n)\n\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n\n        self.agents.shuffle_do(\"exchange\")\n\n\n2.4.1 运行模型\n\nmodel = MoneyModel(10, 1234)  # 创建 10 个 Agents\n\n#这个 for 循环中 _ 是一个占位符\n#表示我们不关心循环变量的值，也不关心现在运行了几次，只是想运行30次\nfor _ in range(30): \n    model.step()\n\n\n\n2.4.2 可视化\n\n# 获取每个 Agent 的 wealth，放入一个列表\nagent_wealth = [a.wealth for a in model.agents]\n# 绘制直方图\ng = sns.histplot(agent_wealth, discrete=True)\ng.set(\n    title=\"Wealth distribution\", xlabel=\"Wealth\", ylabel=\"number of agents\"\n);\nplt.show()\n\n\n\n\n\n\n\n\n\n2.4.2.1 传入 R 中用 ggplot2 可视化\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n#所有的 python 对象都可以用 py$... 来访问\nagent_wealth_r &lt;- tibble(wealth = py$agent_wealth)\n\nggplot(agent_wealth_r, aes(x = wealth)) +\n  geom_histogram(binwidth = 1, boundary = 0, closed = \"left\",\n                 color = \"black\", fill=\"red\") +\n  labs(\n    title = \"Wealth distribution\",\n    x     = \"Wealth\",\n    y     = \"Number of agents\"\n  )+ theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n2.4.3 创建多个模型对象\n为了更好地理解模型行为，可以创建多个模型对象，以观察整体分布。\n\n#创建一个空列表来存储循环结果，与 R 中类似，可以使循环运行更快\nall_wealth = []\n#运行 100 次模型，每个模型有 10 个 Agent，并运行 30 次 step\nfor _ in range(100):\n    model = MoneyModel(10)\n    for _ in range(30):\n        model.step()\n    #注意这里的缩进，说明下面这个循环是在for _ in range(100):循环中\n    #这样每次运行一个模型就会存储所有 Agent 的 wealth\n    for agent in model.agents:\n        #注意这里使用了就地扩展 (append), 即直接向 all_wealth 列表添加元素\n        #这是python的一个特性，直接在list后增加元素不是一个复杂的计算\n        all_wealth.append(agent.wealth)\n        \ng = sns.histplot(all_wealth, discrete=True)\ng.set(title=\"Wealth distribution\", xlabel=\"Wealth\", ylabel=\"number of agents\");\nplt.show()\n\n\n\n\n\n\n\n\n\n2.4.3.1 在 R 中查看模型运行结果\n\nall_wealth_r = tibble(wealth = py$all_wealth)\nhead(all_wealth_r)\n\n# A tibble: 6 × 1\n  wealth\n   &lt;int&gt;\n1      3\n2      0\n3      1\n4      0\n5      0\n6      0\n\nggplot(all_wealth_r, aes(x = wealth)) +\n  geom_histogram(binwidth = 1, boundary = 0, closed = \"left\",\n                 color = \"black\", fill=\"red\") +\n  labs(\n    title = \"Wealth distribution\",\n    x     = \"Wealth\",\n    y     = \"Number of agents\"\n  )+ theme_bw()"
  },
  {
    "objectID": "index.html#导入依赖项",
    "href": "index.html#导入依赖项",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "3.1 导入依赖项",
    "text": "3.1 导入依赖项\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport mesa"
  },
  {
    "objectID": "index.html#基础模型",
    "href": "index.html#基础模型",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "3.2 基础模型",
    "text": "3.2 基础模型\n以下模型即上述财富模型。\n\nclass MoneyAgent(mesa.Agent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model):\n        super().__init__(model)\n        self.wealth = 1\n\n    def exchange(self):\n        if self.wealth &gt; 0:\n            other_agent = self.random.choice(self.model.agents)\n            if other_agent is not None:\n                other_agent.wealth += 1\n                self.wealth -= 1\n\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n):\n        super().__init__()\n        self.num_agents = n\n        MoneyAgent.create_agents(model=self, n=n)\n\n    def step(self):\n        \"\"\"Advance the model by one step.\"\"\"\n        self.agents.shuffle_do(\"exchange\")\n\n\nmodel = MoneyModel(10)\nmodel.step()\n\nprint(f\"You have {len(model.agents)} agents.\")\n\nYou have 10 agents."
  },
  {
    "objectID": "index.html#空间概念",
    "href": "index.html#空间概念",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "3.3 空间概念",
    "text": "3.3 空间概念\nMesa 提供两种空间类型：离散空间和连续空间。\n\n离散空间：Agent 占据单元格或节点\n连续空间：Agent 占据三维空间中的任何位置\n\n以下使用经典笛卡尔坐标系下的离散空间，具有两个模块：单元格 (cell) 和单元格 Agent。\n单元格类表示一个具备以下功能的位置：\n\n具有属性 (如温度、资源等)\n追踪并限制其包含的 Agent\n与相邻单元格连接\n提供邻居 (neighborhood) 的信息\n\n单元格 Agent 类：能够理解如何在单元格中存在和移动的 Agent。\n\nCellAgent: 可以在单元格间移动的 Agent。\nFixedAgent: 永久固定在单元格上的静止 Agent。\nGrid2DMovingAgent: 具有特定网格移动能力的 Agent。\n\n\n\n\nDiscrete Space\n\n\n\n网格 (Grid): 规则多边形\n\n摩尔邻域 (Moore Grid)：每个单元格的八个相邻单元格。\n冯诺依曼邻域 (Von Neumann Grid)：每个单元格的四个相邻单元格。\n六边形 (Hex Grid)：每个单元格的六个相邻单元格。\n\n网络 (Network): 每个格点是图中的一个节点，连接关系由边（edge）定义，适合社交网络、通信拓扑等场景。\n\n\n\n\nNetwork\n\n\n\nVoronoi: 不规则多边形划分空间：给定一组中心点，每块多边形就是一个 Cell，适用于地理空间等不规则网格情形。\n\n\n\n\nVoronoi"
  },
  {
    "objectID": "index.html#代码实现",
    "href": "index.html#代码实现",
    "title": "在 R 中使用 Python 模块 Mesa 来创建 ABM 模型",
    "section": "3.4 代码实现",
    "text": "3.4 代码实现\n\n3.4.1 创建 CellAgent\n为了使模型具有离散空间功能，我们将 MoneyAgent 实例化为 CellAgent。\nCellAgent 是 Agent 的一个子类，专门用于在离散空间 discrete space 模块中交互和移动。\n\n#下面这行import相当于只从 mesa.discrete_space 中导入\n#CellAgent 和 OrthogonalMooreGrid 这两个类，如果此处导入\n#那么下面使用时不需要写明 mesa.discrete_space.CellAgent\n#而可以直接使用CellAgent，类似R中 dplyr::select 和 library(dplyr)\n#from mesa.discrete_space import CellAgent, OrthogonalMooreGrid\n\n#使用父类 CellAgent 来创建一个新的 Agent 类 MoneyAgent\nclass MoneyAgent(mesa.discrete_space.CellAgent):\n    \"\"\"An agent with fixed initial wealth.\"\"\"\n\n    def __init__(self, model, cell): \n        super().__init__(model)\n        self.cell = cell  # 将 Agent 初始化在 (x,y)，这个位置由参数 cell 决定\n        self.wealth = 1\n\n    # 定义移动函数，控制 Agent 在单元格中移动\n    def move(self):\n        # 选择一个随机的相邻单元格，默认半径为 1\n        self.cell = self.cell.neighborhood.select_random_cell()\n    \n    #定义交换财富函数\n    def give_money(self):\n        #选择同一个单元格内所有非本身的 Agent\n        cellmates = [\n            a for a in self.cell.agents if a is not self\n        ] \n        # 如果自己的财富 &gt;0, 切存在同格内的其他 Agent\n        if self.wealth &gt; 0 and cellmates:\n            #在所有同格内的 Agent 中随机选择一个\n            other_agent = self.random.choice(cellmates)\n            #将自己的财富 -1，选中的 Agent 的财富 +1\n            other_agent.wealth += 1\n            self.wealth -= 1\n\n\n\n3.4.2 创建模型类\n\nclass MoneyModel(mesa.Model):\n    \"\"\"A model with some number of agents.\"\"\"\n\n    def __init__(self, n, width, height, seed=None):\n        super().__init__(seed=seed)\n        self.num_agents = n\n        # 创建一个摩尔邻域 (每个单元格有 4 个邻居) 网格\n        self.grid = mesa.discrete_space.OrthogonalMooreGrid(\n            #长宽参数由外部传入，torus控制启用周期性边界\n            #即最右边和最左边相接，上下相接\n            #每个单元格最大可以容纳 10 个 Agent\n            (width, height), torus=True, capacity=10, random=self.random\n        )\n\n        #创建 Agent，这里和前面的模型不一样，新建的 Agent 被存入了列表 agents\n        #因为立刻要对 agents 进行操作，要将其保存\n        #如果直接调用 create_agents，模型中存在的是旧的+新建的 agents\n        #如下写，每次都会覆盖 agents\n        agents = MoneyAgent.create_agents(\n            self, #model = self\n            self.num_agents, # n = self.num_agents\n            #给每个 Agent 分配一个随机的单元格\n            #从所有单元格中挑 k 次，k = Agent 的数量\n            self.random.choices(self.grid.all_cells.cells, k=self.num_agents),\n        )\n    \n    #定义 step，每步运行一次移动和一次给钱\n    def step(self):\n        self.agents.shuffle_do(\"move\")\n        self.agents.do(\"give_money\")\n\n\n\n3.4.3 运行模型"
  }
]